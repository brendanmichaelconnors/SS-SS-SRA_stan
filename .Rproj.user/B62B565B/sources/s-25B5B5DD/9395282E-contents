// Project Name: YUKON RIVER CHINOOK IMEG WORKING GROUP - STAN version of age-structured state-space spawner-recruitment model with AR-1 process variation (Fleischman et al. CJFAS. 2013)
// Creator: Brendan Connors, Fisheries and Oceans Canada and Curry Cunningham, College of Fisheries and Ocean Sciences, UAF
// Date: 14.10.2020
// Purpose: State-space spawner recruitment model

data{
  int nyrs;  // number of calender years
  int a_min;  // minimum age class
  int a_max;  // maximum age class
  int A; // number of age classes
  int nRyrs; // number of recruitment years
  vector[nyrs] S_obs; // observed spawners
  vector[nyrs] H_obs; // observed harvest
  vector[nyrs] S_cv; // spawner observation error CV
  vector[nyrs] H_cv; // harvest observation error CV
  matrix[nyrs, A] A_obs; // observed age composition in counts by age class
}

parameters{
  vector<lower=0>[nRyrs] lnR; // log recruitment states
  real<lower=0> lnalpha; // log Ricker a
  real<lower=0,upper=10> beta; // Ricker b
  real<lower=0> sigma_R; // process error
  real<lower=0> sigma_R0; // process error for first a.max years with no spawner link
  real<lower=-1,upper=1> phi; // lag-1 correlation in process error
  real<lower=-2,upper=2> lnresid_0;  // first residual for lag-1 correlation in process error
  real<lower=0> mean_ln_R0; // "true" mean log recruitment in first a.max years with no spawner link
  vector<lower=0.01,upper=0.99>[nyrs] U;  // harvest rate
  vector<lower=0,upper=1>[3] prob;  // maturity schedule probs
  real<lower=0,upper=1> D_scale; // governs variability of age proportion vectors across cohorts
}

transformed parameters{
  vector<lower=0>[nyrs] N;  // run size states // SA: Can you scale your N so they aren't so huge? This may be creating issues.
  vector<lower=0>[nyrs] S;  // spawner states
  vector[nyrs] lnS;  // log spawner states
  vector<lower=0>[nyrs] C;  // catch states
  vector[nyrs] lnC;  // log catch states
  vector<lower=0>[nRyrs] R;  // recruitment states
  vector[nRyrs] lnresid;  // log recruitment residuals
  vector[nRyrs] lnRm_1;  // log recruitment states in absence of lag-one correlation
  vector[nRyrs] lnRm_2;  // log recruitment states after accounting for lag-one correlation
  matrix<lower=0>[nyrs, A] N_ta; // returns by age matrix
  matrix<lower=0>[nRyrs, A] p; // age at maturity proportions
  matrix<lower=0>[nRyrs, A] g; // gamma variates for generating age at maturity proportions
  vector<lower=0,upper=1>[4] pi;  // maturity schedule probs
  real<lower=0> D_sum; // inverse of D_scale which governs variability of age proportion vectors across cohorts
  vector<lower=0>[A] gamma_shape; // shape parameter for gamma distribution used to generate vector of age-at-maturity proportions
  matrix<lower=0>[nyrs, A] q; // age composition by year matrix

  // Maturity schedule: use a common maturation schedule to draw the brood year specific schedules
  pi[1]= prob[1];
  pi[2] = prob[2] * (1 - pi[1]);
  pi[3] = prob[3] * (1 - pi[1] - pi[2]);
  pi[4] = 1 - pi[1] - pi[2] - pi[3];
  D_sum = 1 / (D_scale * D_scale);

  for (a in 1:A) {
    gamma_shape[a] = D_sum * pi[a];
    for (y in 1:nRyrs) {
      p[y,a] = g[y,a]/sum(g[y,]);
    }
  }

  // Calculate the numbers at age matrix as brood year recruits at age (proportion that matured that year)
  for (t in 1:nyrs) {
    for(a in 1:A){
      N_ta[t,a] = R[t+A-a] * p[t+A-a,a];
    }
  }

  // Calculate returns, spawners and catch by return year
  for(t in 1:nyrs) {
    N[t] = sum(N_ta[t,1:A]);
    S[t] = N[t] * (1 - U[t]);
    lnS[t] = log(S[t]);
    C[t] = N[t] * U[t];
    lnC[t] = log(C[t]);
  }

  // Calculate age proportions by return year
  for (t in 1:nyrs) {
    for(a in 1:A){
      q[t,a] = N_ta[t,a]/N[t];
    }
  }

  // Ricker SR with AR1 process on log recruitment residuals for years with brood year spawners
  R = exp(lnR); // SA: Shouldn't this be earlier in the code?
  for (y in (A+a_min):nRyrs) {
    lnRm_1[y] = lnS[y-a_max] + lnalpha - beta * S[y-a_max];
    lnresid[y] = lnR[y] - lnRm_1[y];
  }

  lnRm_2[A+a_min] =  lnRm_1[A+a_min] + phi * lnresid_0;

  for (y in (A+a_min+1):nRyrs) {
    lnRm_2[y] =  lnRm_1[y] + phi * lnresid[y-1];
  }
}

model{
  //  Define Priors
  lnalpha ~ normal(0,3);
  beta ~ normal(0,1);
  sigma_R ~ normal(0,2);
  phi ~ uniform(-1,1);
  lnresid_0 ~ normal(0,20);
  mean_ln_R0 ~ normal(0,10000); // SA: the scale of this prior makes me worry it might introduce sampling problems; does yet need to be this big?
  sigma_R0 ~ inv_gamma(0.1,0.1); // SA: if you are trying to match the JAGS model then fine, but Gelmand etc. generally prefer half-normal or half-t or exponential now. The inverse-gamma can be quite informative away from 0 in ways that you probably don't want.
  prob[1] ~ beta(1,1);
  prob[2] ~ beta(1,1);
  prob[3] ~ beta(1,1);
  D_scale ~ uniform(0.045,1);

  // Gamma variates for each year and age class which are used to determine age at maturity proportions
  for (a in 1:A) {
    for (y in 1:nRyrs) {
      //g[y,a] ~ gamma(gamma_shape[a],1);
      target += gamma_lpdf(g[y,a]|gamma_shape[a],1);
    }
  }

  // First `a.max` years of recruits, for which there is no spawner link
  for (i in 1:a_max){
    lnR[i] ~ normal(mean_ln_R0, sqrt(sigma_R0));
  } // SA: does this work vectorized? If so that would be slightly faster.

  // State model
  lnR[(A+a_min):nRyrs] ~ normal(lnRm_2[(A+a_min):nRyrs], sigma_R);

  // Observation model
  for(t in 1:nyrs){
    //A_obs[t,1:A] ~ multinomial(q[t,1:A]);
    target += multinomial_lpmf(A_obs[t,1:A]| q[t,1:A]);
    U[t] ~ uniform(0.01, 0.99); // SA: this isn't doing anything because it is already defined as the limits on the parameter is implied
    // SA: Stan may prefer soft bounds, say with a Beta
    H_obs[t] ~ lognormal(lnC[t], sqrt(log((H_cv[t]^2) + 1)));
    S_obs[t] ~ lognormal(lnS[t], sqrt(log((S_cv[t]^2) + 1)));
  }
}


