A = a.max - a.min + 1     # number of age classes
nRyrs = Y + A - 1         # number of recruitment years (see model code for details)
# escapement: assume a 20% observation CV if directly observed, 40% otherwise
S.cv = ifelse(esc[,3] == 0.5, 1, 0.4)
S.obs = esc[,2]
# harvest: assume a 15% observation CV if directly observed, 30% otherwise
C.cv = ifelse(harv[,3] == 1, 0.15, 0.30)
C.obs = harv[,2]
# age composition: assume a ESS of ~ 100 if directly observed
ESS = rowSums(age[,2:5])
X = age[,substr(names(age), 1, 1) == "X"]
X = t(apply(X, 1, function(x) x/sum(x)))
X = round(apply(X, 2, function(x) x * ESS))
colnames(X) = NULL
n = rowSums(X)
x=X
#------------------------------------------------------------------------------#
#  Define SS-SRA model
#------------------------------------------------------------------------------#
modelFilename = "dep_mod.txt"
cat("
model {
# priors for SR portion
lnalpha ~ dunif(0,3)
beta ~ dunif(0,10)
tau.R ~ dgamma(0.01,0.01)  # white noise process error
phi ~ dunif(-0.99, 0.99)   # autocorrelation coefficient
log.resid.0 ~ dnorm(0, tau.red)  # starting residual for AR1 process
# Ricker SR with AR1 process on log recruitment residuals for years with brood year spawners
for (y in (A+a.min):nRyrs) {
log.R[y] ~ dnorm(log.R.mean.2[y], tau.R)  # true state R is lognormally distributed around the prediction given by SR with AR1
R[y] <- exp(log.R[y])
log.R.mean.1[y] <- lnalpha + log(S[y-a.max]) - beta * S[y-a.max]
log.resid.a[y] <- log.R[y] - log.R.mean.1[y]
}
log.R.mean.2[A+a.min] <- log.R.mean.1[A+a.min] + phi * log.resid.0
for (y in (A+a.min+1):nRyrs) {
log.R.mean.2[y] <- log.R.mean.1[y] + phi * log.resid.a[y-1]
}
#derived quantities
tau.red <- tau.R * (1 - phi * phi)
sigma.red <- 1 / sqrt(tau.red)
sigma.R <- 1 / sqrt(tau.R)
alpha <- exp(lnalpha)
log.resid <- log.resid.a[(A+a.min):nRyrs]
# First `a.max` years of recruits, for which there is no spawner link
mean.log.R0 ~ dnorm(0, 1E-4)
mean.R0 <- exp(mean.log.R0)
tau.R0 ~ dgamma(0.1,0.1)
sigma.R0 <- 1/sqrt(tau.R0)
for (y in 1:a.max) {
log.R[y] ~ dnorm(mean.log.R0, tau.R0)
R[y] <- exp(log.R[y])
}
# biological reference points: derived quantities
lnalpha.c <- lnalpha + (sigma.R * sigma.R)/2/(1-phi * phi)
S.max <- 1/beta
S.eq <- lnalpha.c * S.max
S.msy <- S.eq * (0.5 - 0.07 * lnalpha.c)
U.msy <- lnalpha.c * (0.5 - 0.07 * lnalpha.c)
# Maturity schedule: here we use a common maturation schedule to draw the brood year specific schedules;
prob[1] ~ dbeta(1,1)
prob[2] ~ dbeta(1,1)
prob[3] ~ dbeta(1,1)
pi[1]<- prob[1]
pi[2] <- prob[2] * (1 - pi[1])
pi[3] <- prob[3] * (1 - pi[1] - pi[2])
pi[4] <- 1 - pi[1] - pi[2] - pi[3]
D.scale ~ dunif(.045,1)
D.sum <- 1 / (D.scale * D.scale)
for (a in 1:A) {
gamma[a] <- D.sum * pi[a]
for (y in 1:(Y+A-1)) {
g[y,a] ~ dgamma(gamma[a],1.0)
p[y,a] <- g[y,a]/sum(g[y,])
}
}
# Calculate the numbers at age matrix as brood year recruits at age (proportion that matured that year)
for (t in 1:Y) {
for(a in 1:A){
N.ta[t,a] <- R[t+A-a] * p[t+A-a,a]
}
}
## OBSERVATION SUBMODEL ##
# multinomial scale sampling
for (t in 1:Y) {
for (a in 1:A) {
q[t,a] <- N.ta[t,a]/N[t]
}
x[t,1:A] ~ dmulti(q[t,1:A], n[t])
}
for (t in 1:Y) {
# get observation tau's from assumed CV's
log.sigma.C[t] <- sqrt(log((C.cv[t]^2) + 1))
log.tau.C[t] <- 1/log.sigma.C[t]^2
log.sigma.S[t] <- sqrt(log((S.cv[t]^2) + 1))
log.tau.S[t] <- 1/log.sigma.S[t]^2
# catch model
U[t] ~ dunif(0.01, 0.99)
N[t] <- sum(N.ta[t,1:A])
S[t] <- N[t] * (1 - U[t])
C[t] <- N[t] * U[t]
log.C[t] <- log(C[t])
C.obs[t] ~ dlnorm(log.C[t], log.tau.C[t])
# escapement model
log.S[t] <- log(S[t])
S.obs[t] ~ dlnorm(log.S[t], log.tau.S[t])
}
}
", fill=TRUE, file=modelFilename)
#file.show(modelFilename)
#------------------------------------------------------------------------------#
#  Jags inputs
#------------------------------------------------------------------------------#
jags.data = list('Y','a.min','a.max','A','nRyrs','S.cv','S.obs','C.cv','C.obs',
'x','n')
jags.parms = c("R", "N", "S", "U", "alpha", "beta", "lnalpha", "phi", "C", "log.resid",
"log.resid.0","sigma.R", "lnalpha.c", "mean.log.R0", "pi", "q",
"mean.R0", "sigma.R0","S.msy", "S.max", "S.eq", "U.msy", "gamma",
"D.sum", "p","log.S")
#------------------------------------------------------------------------------#
#   Fit Model
#------------------------------------------------------------------------------#
jagsfit.p <- jags.parallel(data=jags.data,  parameters.to.save=jags.parms,n.thin=15,
n.iter=3000, model.file=modelFilename,n.burnin = 500,n.chains=1)
-----------------------------------------------------------------------------#
jagsfit.p <- jags.parallel(data=jags.data,  parameters.to.save=jags.parms,n.thin=15,
n.iter=30000, model.file=modelFilename,n.burnin = 5000,n.chains=4)
#------------------------------------------------------------------------------#
#  Jags inputs
#------------------------------------------------------------------------------#
jags.data = list('Y','a.min','a.max','A','nRyrs','S.cv','S.obs','C.cv','C.obs',
'x','n')
jags.parms = c("R", "N", "S", "U", "alpha", "beta", "lnalpha", "phi", "C", "log.resid",
"log.resid.0","sigma.R", "lnalpha.c", "mean.log.R0", "pi", "q",
"mean.R0", "sigma.R0","S.msy", "S.max", "S.eq", "U.msy", "gamma",
"D.sum", "p","log.S")
#------------------------------------------------------------------------------#
#   Fit Model
#------------------------------------------------------------------------------#
jagsfit.p <- jags.parallel(data=jags.data,  parameters.to.save=jags.parms,n.thin=15,
n.iter=30000, model.file=modelFilename,n.burnin = 5000,n.chains=3)
post = as.mcmc(jagsfit.p)
gelman.diag(post, multivariate = F)
jagsfit.p <- jags.parallel(data=jags.data,  parameters.to.save=jags.parms,n.thin=10,
n.iter=30000, model.file=modelFilename,n.burnin = 5000,n.chains=3)
post = as.mcmc(jagsfit.p)
gelman.diag(post, multivariate = F)
plot.mcmc(post)
require(rstan)
require(rstantools)
Esc <- read.csv('data/EscTab.csv') # escapement
Har <- read.csv('data/HarTab.csv') # harvest
S_cv <- rep(0.2,length(Esc$year)) # placeholder for CV on escapement observations
H_cv <- rep(0.05,length(Har$year)) # placeholder for CV on harvest observations
p_mat <- c(0.05,0.31,0.54,0.1) # placeholder fixed age at maturity
a_min <- 4
a_max <- 7
nyrs <- length(Esc$year)
A <- a_max - a_min + 1
nRyrs <- nyrs + A - 1
# Initialize Model Parameters =======================================
init_fn <- function(chain_id=1) {
list(
"lnR"=abs(rnorm(nRyrs, mean=0, sd=5)),
"lnalpha"=abs(rnorm(1, mean=0, sd=1)),
"beta"=runif(1, min=0.01, max=9.99),
"sigma_R"=abs(rnorm(1, mean=0, sd=1)),
"sigma_R0"=abs(rnorm(1, mean=0, sd=1)),
"phi"=runif(1, min=-1, max=1),
"lnresid_0"=runif(1, min=-1, max=1),
"mean_ln_R0"=abs(rnorm(1, mean=0, sd=1)),
"U"=runif(nyrs, min=0.01, max=0.99)
)
}
# init_fn()
# Initial List of Lists for Multiple Chains (need to specify # of chain)
init_ll <- lapply(1:4, function(id) init_fn(chain_id = id))
# Run Stan Model ====================================================
# STAN MODEL DATA
stan.data <- list("nyrs" = nyrs,
"a_min" = a_min,
"a_max" = a_max,
"A" = A,
"nRyrs" = nyrs + A - 1,
"p" = p_mat,
"S_obs" = Esc$Esc,
"H_obs" = Har$Harvest,
"S_cv" = S_cv,
"H_cv" = H_cv)
# FIT STAN MODEL
stan.fit <- stan(file = "SSSR_AR1.v1.stan",
model_name = "SSSR_AR1.v1",
data = stan.data,
chains = 4,
iter = 5000,
thin = 2,
init=init_ll,
control = list(adapt_delta = 0.99, max_treedepth = 15))
# SUMMARIZE AND DIAGNOSE STAN MODEL
shinystan::launch_shinystan(stan.fit)
# FIT STAN MODEL
stan.fit <- stan(file = "SSSR_AR1.v1.stan",
model_name = "SSSR_AR1.v1",
data = stan.data,
chains = 4,
iter = 1000,
thin = 2,
init=init_ll,
control = list(adapt_delta = 0.99, max_treedepth = 15))
# Run Stan Model ====================================================
# STAN MODEL DATA
stan.data <- list("nyrs" = nyrs,
"a_min" = a_min,
"a_max" = a_max,
"A" = A,
"nRyrs" = nyrs + A - 1,
"p" = p_mat,
"S_obs" = Esc$Esc,
"H_obs" = Har$Harvest,
"S_cv" = S_cv,
"H_cv" = H_cv)
# FIT STAN MODEL
stan.fitttt <- stan(file = "SSSR_AR1.v1.stan",
model_name = "SSSR_AR1.v1",
data = stan.data,
chains = 4,
iter = 1000,
thin = 2)
# SUMMARIZE AND DIAGNOSE STAN MODEL
shinystan::launch_shinystan(stan.fit)
rstan:::rstudio_stanc("SSSR_AR1.v2.stan")
rstan:::rstudio_stanc("SSSR_AR1.v2.stan")
head(post)
mean(post$lnalpha)
post$lnalpha
post[,,1]$lnalpha
require(rstan)
# SA: added:
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
Esc <- read.csv('data/EscTab.csv') # escapement
Har <- read.csv('data/HarTab.csv') # harvest
S_cv <- rep(0.2,length(Esc$year)) # placeholder for CV on escapement observations
H_cv <- rep(0.05,length(Har$year)) # placeholder for CV on harvest observations
p_mat <- c(0.05,0.31,0.54,0.1) # placeholder fixed age at maturity
a_min <- 4
a_max <- 7
nyrs <- length(Esc$year)
A <- a_max - a_min + 1
nRyrs <- nyrs + A - 1
# Run Stan Model ====================================================
# STAN MODEL DATA
stan.data <- list("nyrs" = nyrs,
"a_min" = a_min,
"a_max" = a_max,
"A" = A,
"nRyrs" = nyrs + A - 1,
"p" = p_mat,
"S_obs" = Esc$Esc/1000,
"H_obs" = Har$Harvest/1000,
"S_cv" = S_cv,
"H_cv" = H_cv)
# FIT STAN MODEL without reparameterization
stan.fitttt <- stan(file = "SSSR_AR1.v1.stan",
model_name = "SSSR_AR1.v1",
data = stan.data,
chains = 4,
iter = 1000,
seed = 42,
control = list(adapt_delta = 0.99, max_treedepth = 20)
)
# FIT STAN MODEL without reparameterization
stan.fitttt <- stan(file = "SSSR_AR1.v1.stan",
model_name = "SSSR_AR1.v1",
data = stan.data,
chains = 4,
iter = 1000,
seed = 42)
stan.fitttt <- stan(file = "SSSR_AR1.v1.stan",
model_name = "SSSR_AR1.v1",
data = stan.data,
chains = 4,
iter = 1000,
seed = 42,
control = list(adapt_delta = 0.99, max_treedepth = 20)
)
summary(stan.fit)
summary(stan.fitttt)
rstan:::rstudio_stanc("SSSR_AR1.v1.stan")
# FIT STAN MODEL without reparameterization
stan.fit <- stan(file = "SSSR_AR1.v1.stan",
model_name = "SSSR_AR1.v1",
data = stan.data,
chains = 4,
iter = 1000,
seed = 42,
control = list(adapt_delta = 0.99, max_treedepth = 20)
)
# FIT STAN MODEL without reparameterization
stan.fit <- stan(file = "SSSR_AR1.v1.stan",
model_name = "SSSR_AR1.v1",
data = stan.data,
chains = 4,
iter = 1000,
seed = 42,
control = list(adapt_delta = 0.99, max_treedepth = 20)
)
pairs(fit2, pars = c("lnalpha", "beta", "sigma_R", "sigma_R0", "phi", "mean_ln_R0","lnR[1]", "lnR[2]"))
pairs(stan.fit, pars = c("lnalpha", "beta", "sigma_R", "sigma_R0", "phi", "mean_ln_R0","lnR[1]", "lnR[2]"))
stan.fit.no_reparam_sigma_R0 <- stan(file = "SSSR_AR1.v1.stan",
model_name = "SSSR_AR1.v1",
data = stan.data,
chains = 4,
iter = 2000,
seed = 42,
control = list(adapt_delta = 0.99, max_treedepth = 20)
)
pairs(stan.fit.no_reparam_sigma_R0, pars = c("lnalpha", "beta", "sigma_R", "sigma_R0", "phi", "mean_ln_R0","lnR[1]", "lnR[2]"))
stan.fit.no_reparam_sigma_R0 <- stan(file = "SSSR_AR1.v1.stan",
model_name = "SSSR_AR1.v1",
data = stan.data,
chains = 4,
iter = 2000,
seed = 42,
control = list(adapt_delta = 0.99, max_treedepth = 20)
)
pairs(stan.fit.no_reparam_sigma_R0, pars = c("lnalpha", "beta", "sigma_R", "sigma_R0", "phi", "mean_ln_R0","lnR[1]", "lnR[2]"))
# FIT STAN MODEL without reparameterization
stan.fit.no_reparam_sigma_R0 <- stan(file = "SSSR_AR1.v1.stan",
model_name = "SSSR_AR1.v1",
data = stan.data,
chains = 4,
iter = 4000,
seed = 42,
control = list(adapt_delta = 0.99, max_treedepth = 20)
)
pairs(stan.fit.no_reparam_sigma_R0, pars = c("lnalpha", "beta", "sigma_R", "sigma_R0", "phi", "mean_ln_R0","lnR[1]", "lnR[2]"))
# FIT STAN MODEL without reparameterization
stan.fit.no_reparam_sigma_R0 <- stan(file = "SSSR_AR1.v1.stan",
model_name = "SSSR_AR1.v1",
data = stan.data,
chains = 4,
iter = 1000,
seed = 42,
control = list(adapt_delta = 0.99, max_treedepth = 20)
)
pairs(stan.fit.no_reparam_sigma_R0, pars = c("lnalpha", "beta", "sigma_R", "sigma_R0", "phi", "mean_ln_R0","lnR[1]", "lnR[2]"))
# FIT STAN MODEL without reparameterization
stan.fit.no_reparam_sigma_R0 <- stan(file = "SSSR_AR1.v1.old.stan",
model_name = "SSSR_AR1.v1",
data = stan.data,
chains = 4,
iter = 1000,
seed = 42,
control = list(adapt_delta = 0.99, max_treedepth = 20)
)
pairs(stan.fit.no_reparam_sigma_R0, pars = c("lnalpha", "beta", "sigma_R", "sigma_R0", "phi", "mean_ln_R0","lnR[1]", "lnR[2]"))
# FIT STAN MODEL without reparameterization
stan.fit.no_reparam_sigma_R0 <- stan(file = "SSSR_AR1.v1.stan",
model_name = "SSSR_AR1.v1",
data = stan.data,
chains = 4,
iter = 1000,
seed = 42,
control = list(adapt_delta = 0.99, max_treedepth = 20)
)
pairs(stan.fit.no_reparam_sigma_R0, pars = c("lnalpha", "beta", "sigma_R", "sigma_R0", "phi", "mean_ln_R0","lnR[1]", "lnR[2]"))
# FIT STAN MODEL without reparameterization
stan.fit.no_reparam_sigma_R0 <- stan(file = "SSSR_AR1.v1.stan",
model_name = "SSSR_AR1.v1",
data = stan.data,
chains = 4,
iter = 1000,
seed = 42,
control = list(adapt_delta = 0.99, max_treedepth = 20)
)
pairs(stan.fit.no_reparam_sigma_R0, pars = c("lnalpha", "beta", "sigma_R", "sigma_R0", "phi", "mean_ln_R0","lnR[1]", "lnR[2]"))
# FIT STAN MODEL without reparameterization
stan.fit.no_reparam_sigma_R0 <- stan(file = "SSSR_AR1.v1.stan",
model_name = "SSSR_AR1.v1",
data = stan.data,
chains = 4,
iter = 1000,
seed = 42,
control = list(adapt_delta = 0.99, max_treedepth = 20)
)
pairs(stan.fit.no_reparam_sigma_R0, pars = c("lnalpha", "beta", "sigma_R", "sigma_R0", "phi", "mean_ln_R0","lnR[1]", "lnR[2]"))
# FIT STAN MODEL without reparameterization
stan.fit.no_reparam_sigma_R0 <- stan(file = "SSSR_AR1.v1.stan",
model_name = "SSSR_AR1.v1",
data = stan.data,
chains = 4,
iter = 1000,
seed = 42,
control = list(adapt_delta = 0.99, max_treedepth = 20)
)
pairs(stan.fit.no_reparam_sigma_R0, pars = c("lnalpha", "beta", "sigma_R", "sigma_R0", "phi", "mean_ln_R0","lnR[1]", "lnR[2]"))
# SUMMARIZE AND DIAGNOSE STAN MODEL
shinystan::launch_shinystan(stan.fit.no_reparam_sigma_R0)
rstan:::rstudio_stanc("SSSR_AR1.sigmaR0-reparam.v1.stan")
# FIT STAN MODEL without reparameterization
stan.fit.reparam_sigma_R0 <- stan(file = "SSSR_AR1.sigmaR0-reparam.v1.stan",
model_name = "SSSR_AR1.v1",
data = stan.data,
chains = 4,
iter = 1000,
seed = 42,
control = list(adapt_delta = 0.99, max_treedepth = 20)
)
pairs(stan.fit.no_reparam_sigma_R0, pars = c("lnalpha", "beta", "sigma_R", "sigma_R0", "phi", "mean_ln_R0","lnR[1]", "lnR[2]"))
# FIT STAN MODEL without reparameterization
stan.fit.no_reparam_sigma_R0 <- stan(file = "SSSR_AR1.v1.stan",
model_name = "SSSR_AR1.v1",
data = stan.data,
chains = 4,
iter = 1000,
seed = 42,
control = list(adapt_delta = 0.99, max_treedepth = 20)
)
pairs(stan.fit.no_reparam_sigma_R0, pars = c("lnalpha", "beta", "sigma_R", "sigma_R0", "phi", "mean_ln_R0","lnR[1]", "lnR[2]"))
pairs(stan.fit.reparam_sigma_R0, pars = c("lnalpha", "beta", "sigma_R", "sigma_R0", "phi", "mean_ln_R0","lnR[1]", "lnR[2]"))
# FIT STAN MODEL without reparameterization
stan.fit.no_reparam_sigma_R0 <- stan(file = "SSSR_AR1.v1.stan",
model_name = "SSSR_AR1.v1",
data = stan.data,
chains = 4,
iter = 1000,
seed = 42,
control = list(adapt_delta = 0.99, max_treedepth = 20)
)
pairs(stan.fit.no_reparam_sigma_R0, pars = c("lnalpha", "beta", "sigma_R", "sigma_R0", "phi", "mean_ln_R0","lnR[1]", "lnR[2]"))
# FIT STAN MODEL without reparameterization
stan.fit.no_reparam_sigma_R0 <- stan(file = "SSSR_AR1.v1.stan",
model_name = "SSSR_AR1.v1",
data = stan.data,
chains = 4,
iter = 1000,
seed = 42,
control = list(adapt_delta = 0.99, max_treedepth = 20)
)
pairs(stan.fit.no_reparam_sigma_R0, pars = c("lnalpha", "beta", "sigma_R", "sigma_R0", "phi", "mean_ln_R0","lnR[1]", "lnR[2]"))
# FIT STAN MODEL without reparameterization
stan.fit.no_reparam_sigma_R0 <- stan(file = "SSSR_AR1.v1.stan",
model_name = "SSSR_AR1.v1",
data = stan.data,
chains = 4,
iter = 1000,
seed = 42,
control = list(adapt_delta = 0.99, max_treedepth = 20)
)
pairs(stan.fit.no_reparam_sigma_R0, pars = c("lnalpha", "beta", "sigma_R", "sigma_R0", "phi", "mean_ln_R0","lnR[1]", "lnR[2]"))
# FIT STAN MODEL without reparameterization
stan.fit.no_reparam_sigma_R0 <- stan(file = "SSSR_AR1.v1.stan",
model_name = "SSSR_AR1.v1",
data = stan.data,
chains = 4,
iter = 1000,
seed = 42,
control = list(adapt_delta = 0.99, max_treedepth = 20)
)
pairs(stan.fit.no_reparam_sigma_R0, pars = c("lnalpha", "beta", "sigma_R", "sigma_R0", "phi", "mean_ln_R0","lnR[1]", "lnR[2]"))
# FIT STAN MODEL without reparameterization
stan.fit.no_reparam_sigma_R0 <- stan(file = "SSSR_AR1.v1.stan",
model_name = "SSSR_AR1.v1",
data = stan.data,
chains = 4,
iter = 1000,
seed = 42,
control = list(adapt_delta = 0.99, max_treedepth = 20)
)
pairs(stan.fit.no_reparam_sigma_R0, pars = c("lnalpha", "beta", "sigma_R", "sigma_R0", "phi", "mean_ln_R0","lnR[1]", "lnR[2]"))
# FIT STAN MODEL without reparameterization
stan.fit.no_reparam_sigma_R0 <- stan(file = "SSSR_AR1.v1.stan",
model_name = "SSSR_AR1.v1",
data = stan.data,
chains = 4,
iter = 1000,
seed = 42,
control = list(adapt_delta = 0.99, max_treedepth = 20)
)
pairs(stan.fit.no_reparam_sigma_R0, pars = c("lnalpha", "beta", "sigma_R", "sigma_R0", "phi", "mean_ln_R0","lnR[1]", "lnR[2]"))
# FIT STAN MODEL without reparameterization
stan.fit.no_reparam_sigma_R0 <- stan(file = "SSSR_AR1.v1.stan",
model_name = "SSSR_AR1.v1",
data = stan.data,
chains = 4,
iter = 1000,
seed = 42,
control = list(adapt_delta = 0.99, max_treedepth = 20)
)
pairs(stan.fit.no_reparam_sigma_R0, pars = c("lnalpha", "beta", "sigma_R", "sigma_R0", "phi", "mean_ln_R0","lnR[1]", "lnR[2]"))
# FIT STAN MODEL without reparameterization
stan.fit.no_reparam_sigma_R0 <- stan(file = "SSSR_AR1.v1.stan",
model_name = "SSSR_AR1.v1",
data = stan.data,
chains = 4,
iter = 1000,
seed = 42,
control = list(adapt_delta = 0.99, max_treedepth = 20)
)
pairs(stan.fit.no_reparam_sigma_R0, pars = c("lnalpha", "beta", "sigma_R", "sigma_R0", "phi", "mean_ln_R0","lnR[1]", "lnR[2]"))
# FIT STAN MODEL without reparameterization
stan.fit.no_reparam_sigma_R0 <- stan(file = "SSSR_AR1.v1.stan",
model_name = "SSSR_AR1.v1",
data = stan.data,
chains = 4,
iter = 1000,
seed = 42,
control = list(adapt_delta = 0.99, max_treedepth = 20)
)
pairs(stan.fit.no_reparam_sigma_R0, pars = c("lnalpha", "beta", "sigma_R", "sigma_R0", "phi", "mean_ln_R0","lnR[1]", "lnR[2]"))
